unit Controller.Despesas;

interface

uses
  Horse, System.JSON, System.SysUtils, FireDAC.Comp.Client, Data.DB,
  DataSet.Serialize, Model.Despesas, UtFuncao, Controller.Auth;

procedure Registry;

procedure Lista(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure Listaid(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure Salva(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure Novocadastro(Req: THorseRequest; Res: THorseResponse; Next: TProc);

implementation

procedure Registry;
begin
  THorse.get('v1/despesas', Lista);
  THorse.get('v1/despesasid', Listaid);
  THorse.post('v1/despesas', Salva);
  THorse.post('v1/despesas/novocadastro', Novocadastro);
end;

procedure Novocadastro(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  servico: TDespesas;
  body: TJSONValue;
  erro: string;
begin
  servico := TDespesas.Create;
  try
    try
      body := Req.Body<TJSONObject>;
      servico.idcliente := body.GetValue<Integer>('idcliente', 0);
      servico.idloja    := body.GetValue<Integer>('idloja', 0);

      if servico.NovoCadastro(erro) > 0 then
        Res.Send<TJSONObject>(CreateJsonObj('retorno', servico.iddespesas))
           .Status(THTTPStatus.Created)
      else
        Res.Send<TJSONObject>(CreateJsonObj('erro', erro))
           .Status(THTTPStatus.InternalServerError);
    except
      on ex: Exception do
        Res.Send<TJSONObject>(CreateJsonObj('erro', ex.Message))
           .Status(THTTPStatus.InternalServerError);
    end;
  finally
    servico.Free;
  end;
end;

procedure Lista(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  servico: TDespesas;
  qry: TFDQuery;
  erro: string;
  arraydados: TJSONArray;
begin
  try
    servico := TDespesas.Create;
  except
    Res.Send<TJSONObject>(CreateJsonObj('erro', 'Erro ao conectar com o banco')).Status(500);
    Exit;
  end;

  qry := servico.Lista(Req.Query.Dictionary, erro);
  try
    try
      arraydados := qry.ToJSONArray();
      if erro = '' then
        Res.Send<TJSONArray>(arraydados).Status(THTTPStatus.OK)
      else
        Res.Send<TJSONObject>(CreateJsonObj('erro', erro)).Status(THTTPStatus.InternalServerError);
    except
      on ex: Exception do
        Res.Send<TJSONObject>(CreateJsonObj('erro', ex.Message)).Status(THTTPStatus.InternalServerError);
    end;
  finally
    qry.Free;
    servico.Free;
  end;
end;

procedure Listaid(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  servico: TDespesas;
  qry: TFDQuery;
  erro: string;
  objDespesa: TJSONObject;
  arrRateio: TJSONArray;
  i: Integer;
  rateioItem: TJSONObject;
begin
  try
    servico := TDespesas.Create;
  except
    Res.Send<TJSONObject>(CreateJsonObj('erro', 'Erro ao conectar com o banco')).Status(500);
    Exit;
  end;

  qry := servico.Listaid(Req.Query.Dictionary, erro);
  try
    try
      objDespesa := qry.ToJSONObject;

      // pega o id pesquisado para carregar a lista do model
      if Req.Query.ContainsKey('idpessoabusca') then
        servico.iddespesas := StrToIntDef(Req.Query.Items['idpessoabusca'], 0)
      else
        servico.iddespesas := objDespesa.GetValue<Integer>('iddespesas', 0);

      // carrega os rateios (modelo já resolve idgeral internamente)
      if (servico.iddespesas > 0) and servico.CarregarRateios then
      begin
        arrRateio := TJSONArray.Create;

        for i := 0 to servico.Rateios.Count - 1 do
        begin
          rateioItem := TJSONObject.Create;
          rateioItem.AddPair('tipo', servico.Rateios[i].tipo);

          // >>>>>>>>> ALTERAÇÃO: remover 'identificador'
          if SameText(servico.Rateios[i].tipo, 'DEPARTAMENTO') then
            rateioItem.AddPair('departamento', servico.Rateios[i].departamento)
          else
            rateioItem.AddPair('idsite', servico.Rateios[i].idsite);

          rateioItem.AddPair('percentual', TJSONNumber.Create(servico.Rateios[i].percentual));
          arrRateio.AddElement(rateioItem);
        end;

        objDespesa.AddPair('rateio', arrRateio);
      end;

      if erro = '' then
        Res.Send<TJSONObject>(objDespesa).Status(THTTPStatus.OK)
      else
        Res.Send<TJSONObject>(CreateJsonObj('erro', erro)).Status(THTTPStatus.InternalServerError);
    except
      on ex: Exception do
        Res.Send<TJSONObject>(CreateJsonObj('erro', ex.Message)).Status(THTTPStatus.InternalServerError);
    end;
  finally
    qry.Free;
    servico.Free;
  end;
end;

procedure Salva(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  servico: TDespesas;
  body: TJSONObject;
  erro: string;
  idDespStr: string;
  arrRateio: TJSONArray;
begin
  servico := TDespesas.Create;
  erro := '';
  try
    try
      body := Req.Body<TJSONObject>;

      // >>>>>>>>> pequeno ajuste: ler 'iddespesas' (antes estava lendo idempresa por engano)
      idDespStr := body.GetValue<string>('iddespesas', '');
      if (idDespStr <> '') and StrIsInt(idDespStr) then
        servico.iddespesas := StrToIntDef(idDespStr, 0)
      else
        servico.iddespesas := 0;

      servico.datalancamento       := body.GetValue<string>('datalancamento', '');
      servico.valordespesa         := body.GetValue<string>('valordespesa', '');
      servico.descricao            := body.GetValue<string>('descricao', '');
      servico.comprovante          := body.GetValue<string>('comprovante', '');
      servico.observacao           := body.GetValue<string>('observacao', '');
      servico.periodicidade        := body.GetValue<string>('periodicidade', '');
      servico.categoria            := body.GetValue<string>('categoria', '');
      servico.periodo              := body.GetValue<string>('periodo', '');
      servico.valordaparcela       := body.GetValue<string>('valordaparcela', '');
      servico.dataInicio           := body.GetValue<string>('dataInicio', '');
      servico.parceladoEm          := body.GetValue<string>('parceladoEm', '');
      servico.despesacadastradapor := body.GetValue<string>('despesacadastradapor', '');

      servico.idcliente := body.GetValue<Integer>('idcliente', 0);
      servico.idloja    := body.GetValue<Integer>('idloja', 0);

      if StrIsInt(body.GetValue<string>('idempresa', '')) then
        servico.idempresa := body.GetValue<Integer>('idempresa', 0)
      else
        servico.idempresa := 0;

      if StrIsInt(body.GetValue<string>('idpessoa', '')) then
        servico.idpessoa := body.GetValue<Integer>('idpessoa', 0)
      else
        servico.idpessoa := 0;

      if StrIsInt(body.GetValue<string>('idveiculo', '')) then
        servico.idveiculo := body.GetValue<Integer>('idveiculo', 0)
      else
        servico.idveiculo := 0;

      // ====== NOVO: carregar rateio vindo do body ======
      arrRateio := body.FindValue('rateio') as TJSONArray;  // pode ser nil
      servico.LoadRateiosFromJSONArray(arrRateio);

      if Length(erro) = 0 then
      begin
        if servico.Editar(erro) then
          Res.Send<TJSONObject>(CreateJsonObj('retorno', servico.iddespesas))
             .Status(THTTPStatus.Created)
        else
          Res.Send<TJSONObject>(CreateJsonObj('erro', erro))
             .Status(THTTPStatus.InternalServerError);
      end
      else
        Res.Send<TJSONObject>(CreateJsonObj('erro', erro)).Status(THTTPStatus.BadRequest);
    except
      on ex: Exception do
        Res.Send<TJSONObject>(CreateJsonObj('erro', ex.Message)).Status(THTTPStatus.InternalServerError);
    end;
  finally
    servico.Free;
  end;
end;

end.

